package com.zuunr.drawioserver;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.zuunr.diagrammaker.JsonXmlSerializer;
import com.zuunr.diagrammaker.mxcell.MxCellMerger;
import com.zuunr.diagrammaker.mxcell.XmlDiagramBuilder;
import com.zuunr.json.JsonArray;
import com.zuunr.json.JsonObject;
import com.zuunr.json.JsonValue;
import com.zuunr.json.JsonValueFactory;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@Controller
public class DrawioController {

    private static XmlMapper xmlMapper = new XmlMapper();
    private static Database database = new Database();

    private static final JsonArray PATH_TO_MX_CELL = JsonArray.of("mxfile", "diagram", "mxGraphModel", "root", "mxCell");

    // Serve the Draw.io editor page
    @GetMapping("/")
    public String renderEditorPage(Model model) {
        return "drawio";  // Points to a Thymeleaf or HTML file named `drawio.html`
    }

    // Dummy endpoint to load a diagram
    @GetMapping("/load-diagram")
    @ResponseBody
    public String loadDiagram() {
        // Return a dummy diagram in XML format
        /*
        return """
               <mxGraphModel>
                   <root>
                       <mxCell id="0" />
                       <mxCell id="1" parent="0" />
                       <mxCell id="2" value="Hello, Draw.io!" vertex="1" parent="1">
                           <mxGeometry x="20" y="20" width="120" height="40" as="geometry" />
                       </mxCell>
                   </root>
               </mxGraphModel>
               """;
        */
        String jsonSchema = """
                {
                    "$defs": {
                        "Person": {
                            "title": "Person",
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "homeAddress": {
                                    "$ref": "#/$defs/Address"
                                },
                                "awayAddress": {
                                    "$ref": "#/$defs/Address"
                                },
                                "nickName": {
                                    "type": "string"
                                },
                                "pets": {
                                    "type": "object",
                                    "properties": {
                                        "petName": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "Address": {
                            "title": "Address",
                            "type": "object",
                            "properties": {
                                "street": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
                """;
        /*
        jsonSchema = """
                {
                    "$defs": {
                        "Address": {
                            "title": "Address",
                            "type": "object",
                            "properties": {
                                "street": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
                """;

         */

        String dbId = "id-1";

        // String xmlAutoGenerated = XmlDiagramBuilder.xmlDiagramOf(JsonValueFactory.create(jsonSchema));
        String xmlAutoGenerated = XmlDiagramBuilder.xmlDiagramOf(database.readItem(dbId).get("schema"));
        String xmlCustomization = database.readItem(dbId).get("drawio-xml-customization", JsonValue.NULL).getString();
        xmlCustomization = xmlCustomization == null ? xmlAutoGenerated : xmlCustomization;

        /*
        String xmlCustomization = """
                <mxfile agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0" host="embed.diagrams.net" version="28.0.7">
                  <diagram id="O5m0Za5ys5D574SArSo_" name="Page-1">
                    <mxGraphModel dx="1336" dy="666" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
                      <root>
                        <mxCell id="0" />
                        <mxCell id="1" value="layer1" parent="0" />
                        <mxCell id="auto:/$defs/Address" value="Address" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                          <mxGeometry x="270" y="170" width="140" height="60" as="geometry" />
                        </mxCell>
                        <mxCell id="auto:/$defs/Address/properties/street" value="street: string" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;whiteSpace=wrap;html=1;" parent="auto:/$defs/Address" vertex="1">
                          <mxGeometry y="30" width="140" height="30" as="geometry" />
                        </mxCell>
                        <mxCell id="auto:/$defs/Person#homeAddress" value="homeAddress" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;endArrow=open;endFill=0;" parent="1" source="auto:/$defs/Person" target="auto:/$defs/Address" edge="1">
                          <mxGeometry relative="1" as="geometry" />
                        </mxCell>
                        <mxCell id="auto:/$defs/Person#pets" value="pets" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;endArrow=open;endFill=0;" parent="1" source="auto:/$defs/Person" target="auto:/$defs/Person/properties/pets" edge="1">
                          <mxGeometry relative="1" as="geometry" />
                        </mxCell>
                        <mxCell id="auto:/$defs/Person/properties/pets" value="[object]" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                          <mxGeometry x="270" y="530" width="140" height="60" as="geometry" />
                        </mxCell>
                        <mxCell id="auto:/$defs/Person/properties/pets/properties/petName" value="petName: string" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;whiteSpace=wrap;html=1;" parent="auto:/$defs/Person/properties/pets" vertex="1">
                          <mxGeometry y="30" width="140" height="30" as="geometry" />
                        </mxCell>
                        <mxCell id="auto:/$defs/Person" value="Person" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                          <mxGeometry x="270" y="340" width="140" height="60" as="geometry" />
                        </mxCell>
                        <mxCell id="auto:/$defs/Person/properties/name" value="name: string" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;whiteSpace=wrap;html=1;" parent="auto:/$defs/Person" vertex="1">
                          <mxGeometry y="30" width="140" height="30" as="geometry" />
                        </mxCell>
                      </root>
                    </mxGraphModel>
                  </diagram>
                </mxfile>
                """;

         */
        /*

        xmlCustomization = """
                <mxfile agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0" host="embed.diagrams.net" version="28.0.7">
                  <diagram id="O5m0Za5ys5D574SArSo_" name="Page-1">
                    <mxGraphModel dx="1336" dy="666" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
                      <root>
                        <mxCell id="0" />
                        <mxCell id="1" value="layer1" parent="0" />
                        <mxCell id="auto:/$defs/Address" value="Address" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                          <mxGeometry x="0" y="0" width="140" height="60" as="geometry" />
                        </mxCell>
                      </root>
                    </mxGraphModel>
                  </diagram>
                </mxfile>
                """;
         */

        JsonValue autoGeneratedJson;
        JsonValue customizationJson;
        try {
            JsonNode autoJsonNode = xmlMapper.readTree("<wrapper>" + xmlAutoGenerated + "</wrapper>");
            autoGeneratedJson = JsonValueFactory.create(autoJsonNode.toString());

            JsonNode customizationJsonNode = xmlMapper.readTree("<wrapper>" + xmlCustomization + "</wrapper>");
            customizationJson = JsonValueFactory.create(customizationJsonNode.toString());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        JsonArray mergedMxCells = MxCellMerger.merge(
                customizationJson.get(PATH_TO_MX_CELL).getJsonArray(),
                autoGeneratedJson.get(PATH_TO_MX_CELL).getJsonArray()
        );

        JsonValue mergedFilesAsJson = autoGeneratedJson.put(PATH_TO_MX_CELL, mergedMxCells.jsonValue());

        JsonXmlSerializer xmlSerializer = new JsonXmlSerializer();
        String mergedXml = xmlSerializer.serialize(mergedFilesAsJson);

        return mergedXml;


    }

    // Dummy endpoint to save a diagram
    @PostMapping("/save-diagram")
    public void saveDiagram(@RequestBody String diagram, HttpServletResponse response) throws IOException {
        // Log the diagram XML (In a real app, persist it to a database or file system)
        System.out.println("Received Diagram XML:\n" + diagram);

        String dbId = "id-1";
        database.putItem(database.readItem(dbId).put("drawio-xml-customization", JsonValue.of(diagram)));

        // Respond with success
        response.setStatus(HttpServletResponse.SC_OK);
        response.getWriter().write("Diagram saved successfully!");
    }

    @PutMapping("/schema")

    public void saveSchema(@RequestBody String schemaString, HttpServletResponse response) throws IOException {
        // Log the diagram XML (In a real app, persist it to a database or file system)


        JsonObject schema = JsonValueFactory.create(schemaString).getJsonObject();
        String dbId = "id-1";

        database.putItem(database.readItem(dbId).put("schema", schema.jsonValue()));

        // Respond with success
        response.setStatus(HttpServletResponse.SC_OK);
        response.getWriter().write(schema.asJson());
    }

    @GetMapping("/schema")
    @ResponseBody
    public String getSchema() {
        String dbId = "id-1";
        return database.readItem(dbId).get("schema", JsonObject.EMPTY).asJson();
    }
}